/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

ext {
	mainTestClass = "com.badlogic.gdx.tests.webgpu.WebGPUTestStarter"
	ext.j2w_version = "1.01"
}
sourceSets.main.resources.srcDirs = ["../gdx-tests-android/assets"]

if (JavaVersion.current().isJava9Compatible()) {
	compileJava {
		options.release = versions.java
	}
}
sourceCompatibility = 17 // versions.java
targetCompatibility = 17 //versions.java

//repositories {
//	mavenCentral()
//	maven { url 'https://jitpack.io' }
//}


dependencies {
	implementation project(":tests:gdx-tests")
	implementation project(":backends:gdx-backend-webgpu")
	implementation project(":backends:gdx-backend-lwjgl3")
	implementation project(":backends:gdx-backend-lwjgl3_webgpu")
	implementation project(":extensions:gdx-lwjgl3-angle")
	implementation testnatives.desktop
	//	implementation 'com.github.MonstrousSoftware:Java-to-WebGPU:-SNAPSHOT'
	implementation 'com.github.jnr:jnr-ffi:2.2.17'
	//	implementation "com.github.MonstrousSoftware:java-to-webgpu:${j2w_version}"
}

tasks.register('launchTestsWebGPU', JavaExec) {
	dependsOn classes
	mainClass = mainTestClass
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	workingDir = new File("../gdx-tests-android/assets")
	ignoreExitValue = true
}
configure (launchTestsWebGPU) {
	group "LibGDX"
	description = "Run the WebGPU tests"
}
tasks.register('dist', Jar) {
	dependsOn classes
	manifest {
		attributes 'Main-Class': project.mainTestClass
	}
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	with jar
}
