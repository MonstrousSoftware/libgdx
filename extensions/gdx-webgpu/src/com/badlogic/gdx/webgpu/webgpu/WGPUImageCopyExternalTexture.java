
package com.badlogic.gdx.webgpu.webgpu;

import com.badlogic.gdx.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUImageCopyExternalTexture extends WgpuJavaStruct {

	private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
	private final Pointer externalTexture = new Pointer();
	private final WGPUOrigin3D origin = inner(WGPUOrigin3D.createHeap());
	private final WGPUExtent2D naturalSize = inner(WGPUExtent2D.createHeap());

	private WGPUImageCopyExternalTexture () {
	}

	@Deprecated
	public WGPUImageCopyExternalTexture (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPUImageCopyExternalTexture createHeap () {
		return new WGPUImageCopyExternalTexture();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPUImageCopyExternalTexture createDirect () {
		WGPUImageCopyExternalTexture struct = new WGPUImageCopyExternalTexture();
		struct.useDirectMemory();
		return struct;
	}

	public DynamicStructRef<WGPUChainedStruct> getNextInChain () {
		return nextInChain;
	}

	public WGPUImageCopyExternalTexture setNextInChain (WGPUChainedStruct... x) {
		if (x.length == 0 || x[0] == null) {
			this.nextInChain.set(JavaWebGPU.createNullPointer());
		} else {
			this.nextInChain.set(x);
		}
		return this;
	}

	public jnr.ffi.Pointer getExternalTexture () {
		return externalTexture.get();
	}

	public WGPUImageCopyExternalTexture setExternalTexture (jnr.ffi.Pointer val) {
		this.externalTexture.set(val);
		return this;
	}

	public WGPUOrigin3D getOrigin () {
		return origin;
	}

	public WGPUExtent2D getNaturalSize () {
		return naturalSize;
	}

}
