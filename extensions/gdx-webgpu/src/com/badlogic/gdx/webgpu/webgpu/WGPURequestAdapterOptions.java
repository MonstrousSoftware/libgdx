
package com.badlogic.gdx.webgpu.webgpu;

import com.badlogic.gdx.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;
import org.jetbrains.annotations.Nullable;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPURequestAdapterOptions extends WgpuJavaStruct {

	private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
	private final @Nullable Struct.Pointer compatibleSurface = new Pointer();
	private final Enum<WGPUPowerPreference> powerPreference = new Enum<>(WGPUPowerPreference.class);
	private final Enum<WGPUBackendType> backendType = new Enum<>(WGPUBackendType.class);
	private final Unsigned32 forceFallbackAdapter = new Unsigned32();
	private final Unsigned32 compatibilityMode = new Unsigned32();

	private WGPURequestAdapterOptions () {
	}

	@Deprecated
	public WGPURequestAdapterOptions (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPURequestAdapterOptions createHeap () {
		return new WGPURequestAdapterOptions();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPURequestAdapterOptions createDirect () {
		WGPURequestAdapterOptions struct = new WGPURequestAdapterOptions();
		struct.useDirectMemory();
		return struct;
	}

	public DynamicStructRef<WGPUChainedStruct> getNextInChain () {
		return nextInChain;
	}

	public WGPURequestAdapterOptions setNextInChain (WGPUChainedStruct... x) {
		if (x.length == 0 || x[0] == null) {
			this.nextInChain.set(JavaWebGPU.createNullPointer());
		} else {
			this.nextInChain.set(x);
		}
		return this;
	}

	public jnr.ffi.Pointer getCompatibleSurface () {
		return compatibleSurface.get();
	}

	public WGPURequestAdapterOptions setCompatibleSurface (jnr.ffi.Pointer val) {
		this.compatibleSurface.set(val);
		return this;
	}

	public WGPUPowerPreference getPowerPreference () {
		return powerPreference.get();
	}

	public WGPURequestAdapterOptions setPowerPreference (WGPUPowerPreference val) {
		this.powerPreference.set(val);
		return this;
	}

	public WGPUBackendType getBackendType () {
		return backendType.get();
	}

	public WGPURequestAdapterOptions setBackendType (WGPUBackendType val) {
		this.backendType.set(val);
		return this;
	}

	public long getForceFallbackAdapter () {
		return forceFallbackAdapter.get();
	}

	public WGPURequestAdapterOptions setForceFallbackAdapter (long val) {
		this.forceFallbackAdapter.set(val);
		return this;
	}

	public long getCompatibilityMode () {
		return compatibilityMode.get();
	}

	public WGPURequestAdapterOptions setCompatibilityMode (long val) {
		this.compatibilityMode.set(val);
		return this;
	}

}
