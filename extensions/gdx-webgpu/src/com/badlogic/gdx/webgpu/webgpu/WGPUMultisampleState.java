
package com.badlogic.gdx.webgpu.webgpu;

import com.badlogic.gdx.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUMultisampleState extends WgpuJavaStruct {

	private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
	private final Unsigned32 count = new Unsigned32();
	private final Unsigned32 mask = new Unsigned32();
	private final Unsigned32 alphaToCoverageEnabled = new Unsigned32();

	private WGPUMultisampleState () {
	}

	@Deprecated
	public WGPUMultisampleState (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPUMultisampleState createHeap () {
		return new WGPUMultisampleState();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPUMultisampleState createDirect () {
		WGPUMultisampleState struct = new WGPUMultisampleState();
		struct.useDirectMemory();
		return struct;
	}

	public DynamicStructRef<WGPUChainedStruct> getNextInChain () {
		return nextInChain;
	}

	public WGPUMultisampleState setNextInChain (WGPUChainedStruct... x) {
		if (x.length == 0 || x[0] == null) {
			this.nextInChain.set(JavaWebGPU.createNullPointer());
		} else {
			this.nextInChain.set(x);
		}
		return this;
	}

	public long getCount () {
		return count.get();
	}

	public WGPUMultisampleState setCount (long val) {
		this.count.set(val);
		return this;
	}

	public long getMask () {
		return mask.get();
	}

	public WGPUMultisampleState setMask (long val) {
		this.mask.set(val);
		return this;
	}

	public long getAlphaToCoverageEnabled () {
		return alphaToCoverageEnabled.get();
	}

	public WGPUMultisampleState setAlphaToCoverageEnabled (long val) {
		this.alphaToCoverageEnabled.set(val);
		return this;
	}

}
