
package com.badlogic.gdx.backends.webgpu.webgpu;

import com.badlogic.gdx.backends.webgpu.utils.CStrPointer;
import com.badlogic.gdx.backends.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.backends.webgpu.utils.RustCString;
import com.badlogic.gdx.backends.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;
import org.jetbrains.annotations.Nullable;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUTextureDescriptor extends WgpuJavaStruct {

	private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
	private final @Nullable @CStrPointer Struct.Pointer label = new Pointer();
	private final Unsigned32 usage = new Unsigned32();
	private final Enum<WGPUTextureDimension> dimension = new Enum<>(WGPUTextureDimension.class);
	private final WGPUExtent3D size = inner(WGPUExtent3D.createHeap());
	private final Enum<WGPUTextureFormat> format = new Enum<>(WGPUTextureFormat.class);
	private final Unsigned32 mipLevelCount = new Unsigned32();
	private final Unsigned32 sampleCount = new Unsigned32();
	private final size_t viewFormatCount = new size_t();
	private final Pointer viewFormats = new Pointer();

	private WGPUTextureDescriptor () {
	}

	@Deprecated
	public WGPUTextureDescriptor (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPUTextureDescriptor createHeap () {
		return new WGPUTextureDescriptor();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPUTextureDescriptor createDirect () {
		WGPUTextureDescriptor struct = new WGPUTextureDescriptor();
		struct.useDirectMemory();
		return struct;
	}

	public DynamicStructRef<WGPUChainedStruct> getNextInChain () {
		return nextInChain;
	}

	public WGPUTextureDescriptor setNextInChain (WGPUChainedStruct... x) {
		if (x.length == 0 || x[0] == null) {
			this.nextInChain.set(JavaWebGPU.createNullPointer());
		} else {
			this.nextInChain.set(x);
		}
		return this;
	}

	public java.lang.String getLabel () {
		return RustCString.fromPointer(label.get());
	}

	public WGPUTextureDescriptor setLabel (java.lang.String str) {
		this.label.set(RustCString.toPointer(str));
		return this;
	}

	public long getUsage () {
		return usage.get();
	}

	public WGPUTextureDescriptor setUsage (long val) {
		this.usage.set(val);
		return this;
	}

	public WGPUTextureDimension getDimension () {
		return dimension.get();
	}

	public WGPUTextureDescriptor setDimension (WGPUTextureDimension val) {
		this.dimension.set(val);
		return this;
	}

	public WGPUExtent3D getSize () {
		return size;
	}

	public WGPUTextureFormat getFormat () {
		return format.get();
	}

	public WGPUTextureDescriptor setFormat (WGPUTextureFormat val) {
		this.format.set(val);
		return this;
	}

	public long getMipLevelCount () {
		return mipLevelCount.get();
	}

	public WGPUTextureDescriptor setMipLevelCount (long val) {
		this.mipLevelCount.set(val);
		return this;
	}

	public long getSampleCount () {
		return sampleCount.get();
	}

	public WGPUTextureDescriptor setSampleCount (long val) {
		this.sampleCount.set(val);
		return this;
	}

	public long getViewFormatCount () {
		return viewFormatCount.get();
	}

	public WGPUTextureDescriptor setViewFormatCount (long val) {
		this.viewFormatCount.set(val);
		return this;
	}

	public jnr.ffi.Pointer getViewFormats () {
		return viewFormats.get();
	}

	public WGPUTextureDescriptor setViewFormats (jnr.ffi.Pointer val) {
		this.viewFormats.set(val);
		return this;
	}

}
