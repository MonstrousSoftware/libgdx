
package com.badlogic.gdx.backends.webgpu.webgpu;

import com.badlogic.gdx.backends.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUSharedTextureMemoryZirconHandleDescriptor extends WgpuJavaStruct {

	private final WGPUChainedStruct chain = inner(WGPUChainedStruct.createHeap());
	private final Unsigned32 memoryFD = new Unsigned32();
	private final Unsigned64 allocationSize = new Unsigned64();

	private WGPUSharedTextureMemoryZirconHandleDescriptor () {
	}

	@Deprecated
	public WGPUSharedTextureMemoryZirconHandleDescriptor (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPUSharedTextureMemoryZirconHandleDescriptor createHeap () {
		return new WGPUSharedTextureMemoryZirconHandleDescriptor();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPUSharedTextureMemoryZirconHandleDescriptor createDirect () {
		WGPUSharedTextureMemoryZirconHandleDescriptor struct = new WGPUSharedTextureMemoryZirconHandleDescriptor();
		struct.useDirectMemory();
		return struct;
	}

	public WGPUChainedStruct getChain () {
		return chain;
	}

	public long getMemoryFD () {
		return memoryFD.get();
	}

	public WGPUSharedTextureMemoryZirconHandleDescriptor setMemoryFD (long val) {
		this.memoryFD.set(val);
		return this;
	}

	public @jnr.ffi.types.u_int64_t long getAllocationSize () {
		return allocationSize.get();
	}

	public WGPUSharedTextureMemoryZirconHandleDescriptor setAllocationSize (@jnr.ffi.types.u_int64_t long val) {
		this.allocationSize.set(val);
		return this;
	}

}
