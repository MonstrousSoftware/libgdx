
package com.badlogic.gdx.backends.webgpu.webgpu;

import com.badlogic.gdx.backends.webgpu.utils.CStrPointer;
import com.badlogic.gdx.backends.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.backends.webgpu.utils.RustCString;
import com.badlogic.gdx.backends.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;
import org.jetbrains.annotations.Nullable;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUVertexState extends WgpuJavaStruct {

	private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
	private final Pointer module = new Pointer();
	private final @Nullable @CStrPointer Struct.Pointer entryPoint = new Pointer();
	private final size_t constantCount = new size_t();
	private final DynamicStructRef<WGPUConstantEntry> constants = new DynamicStructRef<>(WGPUConstantEntry.class);
	private final size_t bufferCount = new size_t();
	private final DynamicStructRef<WGPUVertexBufferLayout> buffers = new DynamicStructRef<>(WGPUVertexBufferLayout.class);

	private WGPUVertexState () {
	}

	@Deprecated
	public WGPUVertexState (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPUVertexState createHeap () {
		return new WGPUVertexState();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPUVertexState createDirect () {
		WGPUVertexState struct = new WGPUVertexState();
		struct.useDirectMemory();
		return struct;
	}

	public DynamicStructRef<WGPUChainedStruct> getNextInChain () {
		return nextInChain;
	}

	public WGPUVertexState setNextInChain (WGPUChainedStruct... x) {
		if (x.length == 0 || x[0] == null) {
			this.nextInChain.set(JavaWebGPU.createNullPointer());
		} else {
			this.nextInChain.set(x);
		}
		return this;
	}

	public jnr.ffi.Pointer getModule () {
		return module.get();
	}

	public WGPUVertexState setModule (jnr.ffi.Pointer val) {
		this.module.set(val);
		return this;
	}

	public java.lang.String getEntryPoint () {
		return RustCString.fromPointer(entryPoint.get());
	}

	public WGPUVertexState setEntryPoint (java.lang.String str) {
		this.entryPoint.set(RustCString.toPointer(str));
		return this;
	}

	public long getConstantCount () {
		return constantCount.get();
	}

	public WGPUVertexState setConstantCount (long val) {
		this.constantCount.set(val);
		return this;
	}

	public DynamicStructRef<WGPUConstantEntry> getConstants () {
		return constants;
	}

	public WGPUVertexState setConstants (WGPUConstantEntry... x) {
		if (x.length == 0 || x[0] == null) {
			this.constants.set(JavaWebGPU.createNullPointer());
		} else {
			this.constants.set(x);
		}
		return this;
	}

	public long getBufferCount () {
		return bufferCount.get();
	}

	public WGPUVertexState setBufferCount (long val) {
		this.bufferCount.set(val);
		return this;
	}

	public DynamicStructRef<WGPUVertexBufferLayout> getBuffers () {
		return buffers;
	}

	public WGPUVertexState setBuffers (WGPUVertexBufferLayout... x) {
		if (x.length == 0 || x[0] == null) {
			this.buffers.set(JavaWebGPU.createNullPointer());
		} else {
			this.buffers.set(x);
		}
		return this;
	}

}
