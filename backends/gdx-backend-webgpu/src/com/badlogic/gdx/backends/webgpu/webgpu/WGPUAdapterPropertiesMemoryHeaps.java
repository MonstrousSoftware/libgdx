
package com.badlogic.gdx.backends.webgpu.webgpu;

import com.badlogic.gdx.backends.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.backends.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUAdapterPropertiesMemoryHeaps extends WgpuJavaStruct {

	private final WGPUChainedStructOut chain = inner(WGPUChainedStructOut.createHeap());
	private final size_t heapCount = new size_t();
	private final DynamicStructRef<WGPUMemoryHeapInfo> heapInfo = new DynamicStructRef<>(WGPUMemoryHeapInfo.class);

	private WGPUAdapterPropertiesMemoryHeaps () {
	}

	@Deprecated
	public WGPUAdapterPropertiesMemoryHeaps (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPUAdapterPropertiesMemoryHeaps createHeap () {
		return new WGPUAdapterPropertiesMemoryHeaps();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPUAdapterPropertiesMemoryHeaps createDirect () {
		WGPUAdapterPropertiesMemoryHeaps struct = new WGPUAdapterPropertiesMemoryHeaps();
		struct.useDirectMemory();
		return struct;
	}

	public WGPUChainedStructOut getChain () {
		return chain;
	}

	public long getHeapCount () {
		return heapCount.get();
	}

	public WGPUAdapterPropertiesMemoryHeaps setHeapCount (long val) {
		this.heapCount.set(val);
		return this;
	}

	public DynamicStructRef<WGPUMemoryHeapInfo> getHeapInfo () {
		return heapInfo;
	}

	public WGPUAdapterPropertiesMemoryHeaps setHeapInfo (WGPUMemoryHeapInfo... x) {
		if (x.length == 0 || x[0] == null) {
			this.heapInfo.set(JavaWebGPU.createNullPointer());
		} else {
			this.heapInfo.set(x);
		}
		return this;
	}

}
