
package com.badlogic.gdx.backends.webgpu.webgpu;

import com.badlogic.gdx.backends.webgpu.utils.CStrPointer;
import com.badlogic.gdx.backends.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.backends.webgpu.utils.RustCString;
import com.badlogic.gdx.backends.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;
import org.jetbrains.annotations.Nullable;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPURenderPipelineDescriptor extends WgpuJavaStruct {

	private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
	private final @Nullable @CStrPointer Struct.Pointer label = new Pointer();
	private final @Nullable Struct.Pointer layout = new Pointer();
	private final WGPUVertexState vertex = inner(WGPUVertexState.createHeap());
	private final WGPUPrimitiveState primitive = inner(WGPUPrimitiveState.createHeap());
	private final @Nullable DynamicStructRef<WGPUDepthStencilState> depthStencil = new DynamicStructRef<>(
		WGPUDepthStencilState.class);
	private final WGPUMultisampleState multisample = inner(WGPUMultisampleState.createHeap());
	private final @Nullable DynamicStructRef<WGPUFragmentState> fragment = new DynamicStructRef<>(WGPUFragmentState.class);

	private WGPURenderPipelineDescriptor () {
	}

	@Deprecated
	public WGPURenderPipelineDescriptor (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPURenderPipelineDescriptor createHeap () {
		return new WGPURenderPipelineDescriptor();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPURenderPipelineDescriptor createDirect () {
		WGPURenderPipelineDescriptor struct = new WGPURenderPipelineDescriptor();
		struct.useDirectMemory();
		return struct;
	}

	public DynamicStructRef<WGPUChainedStruct> getNextInChain () {
		return nextInChain;
	}

	public WGPURenderPipelineDescriptor setNextInChain (WGPUChainedStruct... x) {
		if (x.length == 0 || x[0] == null) {
			this.nextInChain.set(JavaWebGPU.createNullPointer());
		} else {
			this.nextInChain.set(x);
		}
		return this;
	}

	public java.lang.String getLabel () {
		return RustCString.fromPointer(label.get());
	}

	public WGPURenderPipelineDescriptor setLabel (java.lang.String str) {
		this.label.set(RustCString.toPointer(str));
		return this;
	}

	public jnr.ffi.Pointer getLayout () {
		return layout.get();
	}

	public WGPURenderPipelineDescriptor setLayout (jnr.ffi.Pointer val) {
		this.layout.set(val);
		return this;
	}

	public WGPUVertexState getVertex () {
		return vertex;
	}

	public WGPUPrimitiveState getPrimitive () {
		return primitive;
	}

	public DynamicStructRef<WGPUDepthStencilState> getDepthStencil () {
		return depthStencil;
	}

	public WGPURenderPipelineDescriptor setDepthStencil (WGPUDepthStencilState... x) {
		if (x.length == 0 || x[0] == null) {
			this.depthStencil.set(JavaWebGPU.createNullPointer());
		} else {
			this.depthStencil.set(x);
		}
		return this;
	}

	public WGPUMultisampleState getMultisample () {
		return multisample;
	}

	public DynamicStructRef<WGPUFragmentState> getFragment () {
		return fragment;
	}

	public WGPURenderPipelineDescriptor setFragment (WGPUFragmentState... x) {
		if (x.length == 0 || x[0] == null) {
			this.fragment.set(JavaWebGPU.createNullPointer());
		} else {
			this.fragment.set(x);
		}
		return this;
	}

}
