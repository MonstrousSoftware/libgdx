package com.badlogic.gdx.backends.webgpu.webgpu;

import com.badlogic.gdx.backends.webgpu.utils.CStrPointer;
import com.badlogic.gdx.backends.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.backends.webgpu.utils.RustCString;
import com.badlogic.gdx.backends.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;
import org.jetbrains.annotations.Nullable;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUFragmentState extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final Pointer module = new Pointer();
    private final @Nullable @CStrPointer Struct.Pointer entryPoint = new Pointer();
    private final size_t constantCount = new size_t();
    private final DynamicStructRef<WGPUConstantEntry> constants = new DynamicStructRef<>(WGPUConstantEntry.class);
    private final size_t targetCount = new size_t();
    private final DynamicStructRef<WGPUColorTargetState> targets = new DynamicStructRef<>(WGPUColorTargetState.class);

    private WGPUFragmentState(){}

    @Deprecated
    public WGPUFragmentState(Runtime runtime){
        super(runtime);
    }

	/**
	* Creates this struct on the java heap.
	* In general, this should <b>not</b> be used because these structs
	* cannot be directly passed into native code. 
	*/
    public static WGPUFragmentState createHeap(){
        return new WGPUFragmentState();
    }

	/**
	* Creates this struct in direct memory.
	* This is how most structs should be created (unless, they
	* are members of a nothing struct)
	* 
	* @see WgpuJavaStruct#useDirectMemory
	*/
    public static WGPUFragmentState createDirect(){
        WGPUFragmentState struct = new WGPUFragmentState();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public WGPUFragmentState setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(JavaWebGPU.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
        return this;
    }

    public jnr.ffi.Pointer getModule(){
        return module.get();
    }

    public WGPUFragmentState setModule(jnr.ffi.Pointer val){
        this.module.set(val); return this;
    }

    public java.lang.String getEntryPoint(){
        return RustCString.fromPointer(entryPoint.get());
    }

    public WGPUFragmentState setEntryPoint(java.lang.String str){
        this.entryPoint.set(RustCString.toPointer(str)); return this;
    }

    public long getConstantCount(){
        return constantCount.get();
    }

    public WGPUFragmentState setConstantCount(long val){
        this.constantCount.set(val); return this;
    }

    public DynamicStructRef<WGPUConstantEntry> getConstants(){
        return constants;
    }

    public WGPUFragmentState setConstants(WGPUConstantEntry... x){
        if(x.length == 0 || x[0] == null){
            this.constants.set(JavaWebGPU.createNullPointer());
        } else {
            this.constants.set(x);
        }
        return this;
    }

    public long getTargetCount(){
        return targetCount.get();
    }

    public WGPUFragmentState setTargetCount(long val){
        this.targetCount.set(val); return this;
    }

    public DynamicStructRef<WGPUColorTargetState> getTargets(){
        return targets;
    }

    public WGPUFragmentState setTargets(WGPUColorTargetState... x){
        if(x.length == 0 || x[0] == null){
            this.targets.set(JavaWebGPU.createNullPointer());
        } else {
            this.targets.set(x);
        }
        return this;
    }

}