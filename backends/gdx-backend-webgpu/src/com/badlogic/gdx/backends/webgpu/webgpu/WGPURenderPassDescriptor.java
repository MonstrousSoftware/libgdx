
package com.badlogic.gdx.backends.webgpu.webgpu;

import com.badlogic.gdx.backends.webgpu.utils.CStrPointer;
import com.badlogic.gdx.backends.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.backends.webgpu.utils.RustCString;
import com.badlogic.gdx.backends.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;
import org.jetbrains.annotations.Nullable;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPURenderPassDescriptor extends WgpuJavaStruct {

	private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
	private final @Nullable @CStrPointer Struct.Pointer label = new Pointer();
	private final size_t colorAttachmentCount = new size_t();
	private final DynamicStructRef<WGPURenderPassColorAttachment> colorAttachments = new DynamicStructRef<>(
		WGPURenderPassColorAttachment.class);
	private final @Nullable DynamicStructRef<WGPURenderPassDepthStencilAttachment> depthStencilAttachment = new DynamicStructRef<>(
		WGPURenderPassDepthStencilAttachment.class);
	private final @Nullable Struct.Pointer occlusionQuerySet = new Pointer();
	private final @Nullable DynamicStructRef<WGPURenderPassTimestampWrites> timestampWrites = new DynamicStructRef<>(
		WGPURenderPassTimestampWrites.class);

	private WGPURenderPassDescriptor () {
	}

	@Deprecated
	public WGPURenderPassDescriptor (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPURenderPassDescriptor createHeap () {
		return new WGPURenderPassDescriptor();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPURenderPassDescriptor createDirect () {
		WGPURenderPassDescriptor struct = new WGPURenderPassDescriptor();
		struct.useDirectMemory();
		return struct;
	}

	public DynamicStructRef<WGPUChainedStruct> getNextInChain () {
		return nextInChain;
	}

	public WGPURenderPassDescriptor setNextInChain (WGPUChainedStruct... x) {
		if (x.length == 0 || x[0] == null) {
			this.nextInChain.set(JavaWebGPU.createNullPointer());
		} else {
			this.nextInChain.set(x);
		}
		return this;
	}

	public java.lang.String getLabel () {
		return RustCString.fromPointer(label.get());
	}

	public WGPURenderPassDescriptor setLabel (java.lang.String str) {
		this.label.set(RustCString.toPointer(str));
		return this;
	}

	public long getColorAttachmentCount () {
		return colorAttachmentCount.get();
	}

	public WGPURenderPassDescriptor setColorAttachmentCount (long val) {
		this.colorAttachmentCount.set(val);
		return this;
	}

	public DynamicStructRef<WGPURenderPassColorAttachment> getColorAttachments () {
		return colorAttachments;
	}

	public WGPURenderPassDescriptor setColorAttachments (WGPURenderPassColorAttachment... x) {
		if (x.length == 0 || x[0] == null) {
			this.colorAttachments.set(JavaWebGPU.createNullPointer());
		} else {
			this.colorAttachments.set(x);
		}
		return this;
	}

	public DynamicStructRef<WGPURenderPassDepthStencilAttachment> getDepthStencilAttachment () {
		return depthStencilAttachment;
	}

	public WGPURenderPassDescriptor setDepthStencilAttachment (WGPURenderPassDepthStencilAttachment... x) {
		if (x.length == 0 || x[0] == null) {
			this.depthStencilAttachment.set(JavaWebGPU.createNullPointer());
		} else {
			this.depthStencilAttachment.set(x);
		}
		return this;
	}

	public jnr.ffi.Pointer getOcclusionQuerySet () {
		return occlusionQuerySet.get();
	}

	public WGPURenderPassDescriptor setOcclusionQuerySet (jnr.ffi.Pointer val) {
		this.occlusionQuerySet.set(val);
		return this;
	}

	public DynamicStructRef<WGPURenderPassTimestampWrites> getTimestampWrites () {
		return timestampWrites;
	}

	public WGPURenderPassDescriptor setTimestampWrites (WGPURenderPassTimestampWrites... x) {
		if (x.length == 0 || x[0] == null) {
			this.timestampWrites.set(JavaWebGPU.createNullPointer());
		} else {
			this.timestampWrites.set(x);
		}
		return this;
	}

}
