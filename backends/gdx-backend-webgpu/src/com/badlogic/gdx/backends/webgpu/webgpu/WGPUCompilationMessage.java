
package com.badlogic.gdx.backends.webgpu.webgpu;

import com.badlogic.gdx.backends.webgpu.utils.CStrPointer;
import com.badlogic.gdx.backends.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.backends.webgpu.utils.RustCString;
import com.badlogic.gdx.backends.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;
import org.jetbrains.annotations.Nullable;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUCompilationMessage extends WgpuJavaStruct {

	private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
	private final @Nullable @CStrPointer Struct.Pointer message = new Pointer();
	private final Enum<WGPUCompilationMessageType> type = new Enum<>(WGPUCompilationMessageType.class);
	private final Unsigned64 lineNum = new Unsigned64();
	private final Unsigned64 linePos = new Unsigned64();
	private final Unsigned64 offset = new Unsigned64();
	private final Unsigned64 length = new Unsigned64();
	private final Unsigned64 utf16LinePos = new Unsigned64();
	private final Unsigned64 utf16Offset = new Unsigned64();
	private final Unsigned64 utf16Length = new Unsigned64();

	private WGPUCompilationMessage () {
	}

	@Deprecated
	public WGPUCompilationMessage (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPUCompilationMessage createHeap () {
		return new WGPUCompilationMessage();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPUCompilationMessage createDirect () {
		WGPUCompilationMessage struct = new WGPUCompilationMessage();
		struct.useDirectMemory();
		return struct;
	}

	public DynamicStructRef<WGPUChainedStruct> getNextInChain () {
		return nextInChain;
	}

	public WGPUCompilationMessage setNextInChain (WGPUChainedStruct... x) {
		if (x.length == 0 || x[0] == null) {
			this.nextInChain.set(JavaWebGPU.createNullPointer());
		} else {
			this.nextInChain.set(x);
		}
		return this;
	}

	public java.lang.String getMessage () {
		return RustCString.fromPointer(message.get());
	}

	public WGPUCompilationMessage setMessage (java.lang.String str) {
		this.message.set(RustCString.toPointer(str));
		return this;
	}

	public WGPUCompilationMessageType getType () {
		return type.get();
	}

	public WGPUCompilationMessage setType (WGPUCompilationMessageType val) {
		this.type.set(val);
		return this;
	}

	public @jnr.ffi.types.u_int64_t long getLineNum () {
		return lineNum.get();
	}

	public WGPUCompilationMessage setLineNum (@jnr.ffi.types.u_int64_t long val) {
		this.lineNum.set(val);
		return this;
	}

	public @jnr.ffi.types.u_int64_t long getLinePos () {
		return linePos.get();
	}

	public WGPUCompilationMessage setLinePos (@jnr.ffi.types.u_int64_t long val) {
		this.linePos.set(val);
		return this;
	}

	public @jnr.ffi.types.u_int64_t long getOffset () {
		return offset.get();
	}

	public WGPUCompilationMessage setOffset (@jnr.ffi.types.u_int64_t long val) {
		this.offset.set(val);
		return this;
	}

	public @jnr.ffi.types.u_int64_t long getLength () {
		return length.get();
	}

	public WGPUCompilationMessage setLength (@jnr.ffi.types.u_int64_t long val) {
		this.length.set(val);
		return this;
	}

	public @jnr.ffi.types.u_int64_t long getUtf16LinePos () {
		return utf16LinePos.get();
	}

	public WGPUCompilationMessage setUtf16LinePos (@jnr.ffi.types.u_int64_t long val) {
		this.utf16LinePos.set(val);
		return this;
	}

	public @jnr.ffi.types.u_int64_t long getUtf16Offset () {
		return utf16Offset.get();
	}

	public WGPUCompilationMessage setUtf16Offset (@jnr.ffi.types.u_int64_t long val) {
		this.utf16Offset.set(val);
		return this;
	}

	public @jnr.ffi.types.u_int64_t long getUtf16Length () {
		return utf16Length.get();
	}

	public WGPUCompilationMessage setUtf16Length (@jnr.ffi.types.u_int64_t long val) {
		this.utf16Length.set(val);
		return this;
	}

}
