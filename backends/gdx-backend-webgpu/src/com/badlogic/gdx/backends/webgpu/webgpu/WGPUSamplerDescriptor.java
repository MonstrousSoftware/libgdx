
package com.badlogic.gdx.backends.webgpu.webgpu;

import com.badlogic.gdx.backends.webgpu.utils.CStrPointer;
import com.badlogic.gdx.backends.webgpu.utils.JavaWebGPU;
import com.badlogic.gdx.backends.webgpu.utils.RustCString;
import com.badlogic.gdx.backends.webgpu.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;
import org.jetbrains.annotations.Nullable;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUSamplerDescriptor extends WgpuJavaStruct {

	private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
	private final @Nullable @CStrPointer Struct.Pointer label = new Pointer();
	private final Enum<WGPUAddressMode> addressModeU = new Enum<>(WGPUAddressMode.class);
	private final Enum<WGPUAddressMode> addressModeV = new Enum<>(WGPUAddressMode.class);
	private final Enum<WGPUAddressMode> addressModeW = new Enum<>(WGPUAddressMode.class);
	private final Enum<WGPUFilterMode> magFilter = new Enum<>(WGPUFilterMode.class);
	private final Enum<WGPUFilterMode> minFilter = new Enum<>(WGPUFilterMode.class);
	private final Enum<WGPUMipmapFilterMode> mipmapFilter = new Enum<>(WGPUMipmapFilterMode.class);
	private final Float lodMinClamp = new Float();
	private final Float lodMaxClamp = new Float();
	private final Enum<WGPUCompareFunction> compare = new Enum<>(WGPUCompareFunction.class);
	private final Unsigned16 maxAnisotropy = new Unsigned16();

	private WGPUSamplerDescriptor () {
	}

	@Deprecated
	public WGPUSamplerDescriptor (Runtime runtime) {
		super(runtime);
	}

	/** Creates this struct on the java heap. In general, this should <b>not</b> be used because these structs cannot be directly
	 * passed into native code. */
	public static WGPUSamplerDescriptor createHeap () {
		return new WGPUSamplerDescriptor();
	}

	/** Creates this struct in direct memory. This is how most structs should be created (unless, they are members of a nothing
	 * struct)
	 * 
	 * @see WgpuJavaStruct#useDirectMemory */
	public static WGPUSamplerDescriptor createDirect () {
		WGPUSamplerDescriptor struct = new WGPUSamplerDescriptor();
		struct.useDirectMemory();
		return struct;
	}

	public DynamicStructRef<WGPUChainedStruct> getNextInChain () {
		return nextInChain;
	}

	public WGPUSamplerDescriptor setNextInChain (WGPUChainedStruct... x) {
		if (x.length == 0 || x[0] == null) {
			this.nextInChain.set(JavaWebGPU.createNullPointer());
		} else {
			this.nextInChain.set(x);
		}
		return this;
	}

	public java.lang.String getLabel () {
		return RustCString.fromPointer(label.get());
	}

	public WGPUSamplerDescriptor setLabel (java.lang.String str) {
		this.label.set(RustCString.toPointer(str));
		return this;
	}

	public WGPUAddressMode getAddressModeU () {
		return addressModeU.get();
	}

	public WGPUSamplerDescriptor setAddressModeU (WGPUAddressMode val) {
		this.addressModeU.set(val);
		return this;
	}

	public WGPUAddressMode getAddressModeV () {
		return addressModeV.get();
	}

	public WGPUSamplerDescriptor setAddressModeV (WGPUAddressMode val) {
		this.addressModeV.set(val);
		return this;
	}

	public WGPUAddressMode getAddressModeW () {
		return addressModeW.get();
	}

	public WGPUSamplerDescriptor setAddressModeW (WGPUAddressMode val) {
		this.addressModeW.set(val);
		return this;
	}

	public WGPUFilterMode getMagFilter () {
		return magFilter.get();
	}

	public WGPUSamplerDescriptor setMagFilter (WGPUFilterMode val) {
		this.magFilter.set(val);
		return this;
	}

	public WGPUFilterMode getMinFilter () {
		return minFilter.get();
	}

	public WGPUSamplerDescriptor setMinFilter (WGPUFilterMode val) {
		this.minFilter.set(val);
		return this;
	}

	public WGPUMipmapFilterMode getMipmapFilter () {
		return mipmapFilter.get();
	}

	public WGPUSamplerDescriptor setMipmapFilter (WGPUMipmapFilterMode val) {
		this.mipmapFilter.set(val);
		return this;
	}

	public float getLodMinClamp () {
		return lodMinClamp.get();
	}

	public WGPUSamplerDescriptor setLodMinClamp (float val) {
		this.lodMinClamp.set(val);
		return this;
	}

	public float getLodMaxClamp () {
		return lodMaxClamp.get();
	}

	public WGPUSamplerDescriptor setLodMaxClamp (float val) {
		this.lodMaxClamp.set(val);
		return this;
	}

	public WGPUCompareFunction getCompare () {
		return compare.get();
	}

	public WGPUSamplerDescriptor setCompare (WGPUCompareFunction val) {
		this.compare.set(val);
		return this;
	}

	public int getMaxAnisotropy () {
		return maxAnisotropy.get();
	}

	public WGPUSamplerDescriptor setMaxAnisotropy (int val) {
		this.maxAnisotropy.set(val);
		return this;
	}

}
